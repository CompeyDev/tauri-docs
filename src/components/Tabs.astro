---
interface Props {
  tabTitles: string[]
}

const { tabTitles } = Astro.props

if (!tabTitles) {
  throw Error(`'tabTitles' prop not passed for ${Astro.url.pathname}`)
}

if (!tabTitles.every((title) => Astro.slots.has(title))) {
  throw Error(
    `The tab ${title} is not included in the Tabs body for ${Astro.url.pathname}`
  )
}

const slots = await Promise.all(
  tabTitles.map(async (title) => await Astro.slots.render(title))
)
// TODO: URI encode the title
// TODO: Local storage for remembering selected tab
// TODO: Styling for content
// TODO: Make each tab have a unique selector on the page
---

<div class="card">
  {
    tabTitles.map((title, index) => (
      <>
        <input
          class="tab-input"
          type="radio"
          name="tabs"
          id={title}
          checked={index === 0}
        />
        <label for={title} class="tab-label btn-normal">
          {title}
        </label>
      </>
    ))
  }

  {
    slots.map((html) => (
      <div class="tab">
        <Fragment set:html={html} />
      </div>
    ))
  }
</div>

<style>
  .tab-input {
    display: none;
  }
  .tab-input + .tab-label {
    display: inline-block;
  }
  .tab-input ~ .tab {
    display: none;
  }
  .tab-input:nth-of-type(1):checked ~ .tab:nth-of-type(1) {
    display: block;
  }
  .tab-input:nth-of-type(2):checked ~ .tab:nth-of-type(2) {
    display: block;
  }
  .tab-input:nth-of-type(3):checked ~ .tab:nth-of-type(3) {
    display: block;
  }
  .tab-input:nth-of-type(4):checked ~ .tab:nth-of-type(4) {
    display: block;
  }
  .tab-input:nth-of-type(5):checked ~ .tab:nth-of-type(5) {
    display: block;
  }
  .tab-input:nth-of-type(6):checked ~ .tab:nth-of-type(6) {
    display: block;
  }
  .tab-input:nth-of-type(7):checked ~ .tab:nth-of-type(7) {
    display: block;
  }
  .tab-input:nth-of-type(8):checked ~ .tab:nth-of-type(8) {
    display: block;
  }
  .tab-input:nth-of-type(9):checked ~ .tab:nth-of-type(9) {
    display: block;
  }
  .tab-input:nth-of-type(10):checked ~ .tab:nth-of-type(10) {
    display: block;
  }
</style>
